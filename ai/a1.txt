/** <examples>
?- astar([q],Path,Cost,
[[q,a],[q,b,c],[a,d,e],[a,c,e,f],[b,c],[c,e,f],[e],[f,e]]).

?- astar([q],Path,Cost,[[q,a],[q,b,c],[a],[b],[c]]).
*/

% astar(+Node,?Path,?Cost,+KB)

arc([H|T],Node,Cost,KB) :- member([H|B],KB),
    append(B,T,Node),
    length(B,L),
    Cost is 1+L/(L+1).

heuristic(Node,H) :- length(Node,H).

goal([]).

% Node is a list of [Node,Path,Cost]
% Path is a list of [Node,Path]
astar(Node,Path,Cost,KB) :- search([[Node,[],0]],Path,Cost,KB).

search([[Node,Path,Cost]|_],FinalPath,Cost,_) :- append(Path,[Node],FinalPath), goal(Node).
search([[Node,P,C]|More],Path,Cost,KB) :-
    append(P,[Node],FullPath),
    findall([X,FullPath,TotalCost], (arc(Node,X,FoundCost,KB), TotalCost is FoundCost+C),Children),
    add2frontier(Children,More,TmpFrontier),
    frontierSort(TmpFrontier,SortedFrontier),
    search(SortedFrontier,Path,Cost,KB).

frontierSort([H|T],SortedList) :- sortRecursive(H,[],T,SortedList).

sortRecursive(H,Sorted,[],[H|Sorted]).
sortRecursive(X,Sorted,[H|T],SortedList) :- less-than(X,H), !,
	sortRecursive(X,[H|Sorted],T,SortedList) ; 
    sortRecursive(H,[X|Sorted],T,SortedList).

add2frontier(Children, Frontier, NewFrontier) :- append(Children,Frontier,NewFrontier).
%add2frontier(Children,[],Children).
%add2frontier(Children,[H|T],[H|More]) :- 
%	add2frontier(Children,T,More).

less-than([Node1,_,Cost1|_],[Node2,_,Cost2|_]) :-
	heuristic(Node1,Hvalue1),
    heuristic(Node2,Hvalue2),
	F1 is Cost1+Hvalue1,
    F2 is Cost2+Hvalue2,
	F1 =< F2.